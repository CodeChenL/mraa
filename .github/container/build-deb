#!/bin/bash

set -euo pipefail
shopt -s nullglob

build() {
    local SCRIPT_DIR="$(dirname "$(realpath "$0")")"

    local NATIVE_BUILD="false"
    local CONTAINER_BACKEND="podman"
    local CONTAINER_REGISTRY=""
    local NO_CONTAINER_UPDATE="false"
    local CONTAINER_SHELL="false"

    if ! $NATIVE_BUILD
    then
        if [[ "$(basename "$CONTAINER_BACKEND")" == "docker" ]] && "$CONTAINER_BACKEND" -h | grep -q podman
        then
            echo "'$CONTAINER_BACKEND' backend is selected, but the functionality is actually provided by 'podman' backend. Updating accordingly..."
            CONTAINER_BACKEND="$(command -v podman)"
        fi

        local CONTAINER_IMAGE="$($CONTAINER_BACKEND image ls "-qf=reference=${CONTAINER_REGISTRY}mraa:master")"
        local CONTAINER_EXIT_CODE=0

        if ! $NO_CONTAINER_UPDATE
        then
            if [[ -z $CONTAINER_REGISTRY ]]
            then
                $CONTAINER_BACKEND build --force-rm -t "${CONTAINER_REGISTRY}mraa:master" "$SCRIPT_DIR"
            else
                $CONTAINER_BACKEND pull "${CONTAINER_REGISTRY}mraa:master"
            fi
        fi

        if [[ $CONTAINER_IMAGE != "$($CONTAINER_BACKEND image ls "-qf=reference=${CONTAINER_REGISTRY}mraa:master")" ]]
        then
            $CONTAINER_BACKEND container rm mraa &>/dev/null || true
            $CONTAINER_BACKEND image rm "${CONTAINER_REGISTRY}mraa:builder" &>/dev/null || true
        fi

        CONTAINER_BUILDER="$($CONTAINER_BACKEND image ls "-qf=reference=${CONTAINER_REGISTRY}mraa:builder")"
        if [[ -z $CONTAINER_BUILDER ]]
        then
            $CONTAINER_BACKEND tag "${CONTAINER_REGISTRY}mraa:master" "${CONTAINER_REGISTRY}mraa:builder"
        fi

        CONTAINER_OPTIONS=( "--name" "mraa" )
        CONTAINER_OPTIONS+=( "--workdir" "$PWD" )
        CONTAINER_OPTIONS+=( "--mount" "type=bind,source=$PWD,destination=$PWD" )
        CONTAINER_OPTIONS+=( "--mount" "type=bind,source=$(realpath $SCRIPT_DIR/../../..),destination=$(realpath $SCRIPT_DIR/../../..)" )
        if [[ -t 0 ]]
        then
            CONTAINER_OPTIONS+=( "-it" )
        fi
        if [[ "$PWD" != "$SCRIPT_DIR" ]]
        then
            CONTAINER_OPTIONS+=( "--mount" "type=bind,source=$SCRIPT_DIR,destination=$SCRIPT_DIR" )
        fi
        $CONTAINER_BACKEND container kill mraa &>/dev/null || true
        $CONTAINER_BACKEND container rm mraa &>/dev/null || true
        if [[ "$(basename "$CONTAINER_BACKEND")" == "podman" ]]
        then
            CONTAINER_OPTIONS+=( "--user" "root" )
            if $CONTAINER_SHELL
            then
                if ! $CONTAINER_BACKEND run "${CONTAINER_OPTIONS[@]}" "${CONTAINER_REGISTRY}mraa:builder" bash
                then
                    CONTAINER_EXIT_CODE="$($CONTAINER_BACKEND inspect mraa --format='{{.State.ExitCode}}')"
                fi
            else
                if ! $CONTAINER_BACKEND run "${CONTAINER_OPTIONS[@]}" "${CONTAINER_REGISTRY}mraa:builder" make deb
                then
                    CONTAINER_EXIT_CODE="$($CONTAINER_BACKEND inspect mraa --format='{{.State.ExitCode}}')"
                fi
                $CONTAINER_BACKEND container rm mraa
            fi
        else
            local CONTAINER_SUDO="sed -i -E \"s/^(runner):(x?):([0-9]+):([0-9]+):(.*):(.*):(.*)$/\1:\2:$(id -u):$(id -g):\5:\6:\7/\" /etc/passwd && sudo -u runner"
            if $CONTAINER_SHELL
            then
                if ! $CONTAINER_BACKEND run "${CONTAINER_OPTIONS[@]}" "${CONTAINER_REGISTRY}mraa:builder" bash -c "$CONTAINER_SUDO -i"
                then
                    CONTAINER_EXIT_CODE="$($CONTAINER_BACKEND inspect mraa --format='{{.State.ExitCode}}')"
                fi
            else
                if ! $CONTAINER_BACKEND run "${CONTAINER_OPTIONS[@]}" "${CONTAINER_REGISTRY}mraa:builder" bash -c "$CONTAINER_SUDO make deb"
                then
                    CONTAINER_EXIT_CODE="$($CONTAINER_BACKEND inspect mraa --format='{{.State.ExitCode}}')"
                fi
                $CONTAINER_BACKEND container rm mraa
            fi
        fi
        return $CONTAINER_EXIT_CODE
    fi
}

build